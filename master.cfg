# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.


def load_password():
    """ read username:password from password file """
    lines = open('password', 'r').readlines()
    usernames_passwords = []
    admin_usernames = []
    for line in lines:
        username, pwhash = line.split(':')
        entry = [username, pwhash.rstrip()]
        usernames_passwords.append(entry)
        admin_usernames.append(username)
    return usernames_passwords, admin_usernames

usernames_passwords, admin_usernames = load_password()

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("kernelci", "gentoo4all")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://anongit.gentoo.org/proj/linux-patches.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="4.10",
                            change_filter=util.ChangeFilter(branch='4.10'),
                            treeStableTimer=None,
                            builderNames=["4.10"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="4.9",
                            change_filter=util.ChangeFilter(branch='4.9'),
                            treeStableTimer=None,
                            builderNames=["4.9"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_49",
                            builderNames=["4.9"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="4.8",
                            change_filter=util.ChangeFilter(branch='4.8'),
                            treeStableTimer=None,
                            builderNames=["4.8"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_48",
                            builderNames=["4.8"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="4.4",
                            change_filter=util.ChangeFilter(branch='4.4'),
                            treeStableTimer=None,
                            builderNames=["4.4"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_44",
                            builderNames=["4.4"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="4.1",
                            change_filter=util.ChangeFilter(branch='4.1'),
                            treeStableTimer=None,
                            builderNames=["4.1"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_41",
                            builderNames=["4.1"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="gentoo_sources",
                            change_filter=util.ChangeFilter(branch='4.1'),
                            treeStableTimer=None,
                            builderNames=["gentoo_sources"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_gentoo_sources",
                            builderNames=["gentoo_sources"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


def download_new_patch_and_build_kernel(version):
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl='git://anongit.gentoo.org/proj/linux-patches.git',
                          mode='incremental',workdir="build/linux-patches", branch=version))
    factory.addStep(steps.FileDownload(mastersrc="~/files/check-kernelpage.py",
                                   workerdest="files/check-kernelpage.py"))
    factory.addStep(steps.FileDownload(mastersrc="~/files/patch-kernel.sh",
                                   workerdest="files/patch-kernel.sh"))
    factory.addStep(steps.FileDownload(mastersrc="~/files/clean.sh",
                                   workerdest="clean.sh"))
    factory.addStep(steps.FileDownload(mastersrc="~/files/find.sh",
                                   workerdest="files/find.sh"))
    factory.addStep(steps.ShellCommand(command=["/usr/bin/python", "check-kernelpage.py","--version",version],
                                   workdir="build/files/"))
    factory.addStep(steps.ShellCommand(command=["/bin/sh", "patch-kernel.sh", "-k", version],
                                   workdir="build/files/"))
    factory.addStep(steps.ShellCommand(command=["/bin/sh", "find.sh"],
                                   workdir="build/files/"))
    factory.addStep(steps.ShellCommand(command=["make", "-j6"],
                                   workdir="build/files/linux-" + version + "/"))
    factory.addStep(steps.ShellCommand(command=["make", "modules", "modules_install"],
                                   workdir="build/files/linux-" + version + "/"))
    factory.addStep(steps.ShellCommand(command=["make", "install"],
                                   workdir="build/files/linux-" + version + "/"))
    factory.addStep(steps.ShellCommand(command=["/bin/sh", "clean.sh"],
                                   workdir="build/"))
    return factory


def test_gentoo_sources(version):
    factory = util.BuildFactory()
    factory.addStep(steps.ShellCommand(command=["emerge", "--sync"]))
    factory.addStep(steps.ShellCommand(command=["emerge", "-v", '=gentoo-sources-' + version ]))
    factory.addStep(steps.ShellCommand(command=["make", "allyesconfig"],
                                       workdir="/usr/src/linux-" + version + "-gentoo"))
    factory.addStep(steps.ShellCommand(command=["make"],
                                       workdir="/usr/src/linux-" + version + "-gentoo"))
    return factory

download_new_patch_and_build_kernel_kernel_list = {'4.11','4.10':'4.9','4.8':'4.8','4.4':'4.4','4.1':'4.1'}

c['builders'] = []
for build_name, kernel_version in download_new_patch_and_build_kernel_kernel_list.items():
    c['builders'].append(
        util.BuilderConfig(name=build_name,
          workernames=["kernelci"],
          factory=download_new_patch_and_build_kernel(kernel_version)))

c['builders'].append(
    util.BuilderConfig(name='gentoo_sources',
      workernames=["kernelci"],
      factory=test_gentoo_sources("4.9.8")))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

irc = (reporters.IRC(host="irc.freenode.net", nick="kernelci",
                   channels=["#gentoo-kernelci"]))

c['services'].append(irc)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Gentoo Kernel"
c['titleURL'] = "https://wiki.gentoo.org/wiki/Project:Kernel"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://http://kernel1.amd64.dev.gentoo.org:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
            plugins=dict(waterfall_view={}, console_view={}))
c['www']['authz'] = util.Authz(
    allowRules = [
        util.AnyEndpointMatcher(role="admins")
    ],
    roleMatchers = [
        util.RolesFromUsername(roles=['admins'], usernames=admin_usernames)
    ]
)

c['www']['auth'] = util.UserPasswordAuth(usernames_passwords)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
