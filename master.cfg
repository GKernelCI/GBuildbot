# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.process.properties import Interpolate

from config.builders import builders
from config.schedulers import schedulers
from config.sources import sources

import os

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {
  'change_source': sources,
  'builders': builders,
  'schedulers': schedulers
}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = []
c['workers'].append(worker.Worker(os.environ.get('WORKER_NAME'), os.environ.get('WORKER_PASSWORD'), max_builds=4))

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}




####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

context = Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=os.environ.get("BUILDBOT_STATUS_TOKEN"),
                                context=context,
                                verbose=True)

c['services'] = []

irc = reporters.IRC(host=os.environ.get('IRC_HOST'), nick=os.environ.get('IRC_NICK'),
                    channels=[os.environ.get('IRC_CHANNELS')],
                    noticeOnChannel=True,
                    notify_events={
                        'started': 1,
                        'success': 1,
                        'failure': 1,
                        'exception': 1,
                    })
c['services'].append(irc)

template = u'''\
<h4>Build status: {{ summary }}</h4>
<p> Worker used: {{ workername }}</p>
{% for step in build['steps'] %}
<p> {{ step['name'] }}: {{ step['result'] }}</p>
{% endfor %}
<p><b> -- Gentoo Kernel-CI Buildbot</b></p>
'''

#mn = reporters.MailNotifier(fromaddr="gkernelci@alicef.me",
#                            sendToInterestedUsers=False,
#                            mode=('all'),
#                            extraRecipients=['alicef+gkernelci@gentoo.org',
#                                             'gentoo@veremit.xyz'],
#                            messageFormatter=reporters.MessageFormatter(
#                               template=template, template_type='html',
#                               wantProperties=True, wantSteps=True),
#                               relayhost="mail.alicef.me",
#                               smtpPort=465, smtpUser="gkernelci@alicef.me",
#                               smtpPassword=os.environ.get('MAIL_PASSWORD'))

#c['services'].append(mn)
c['services'].append(gs)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = os.environ.get('GKERNELCI_TITLE')
c['titleURL'] = os.environ.get('GKERNELCI_TITLE_URL')

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get('GKERNELCI_URL')

# minimalistic config to activate new web UI
c['www'] = {
            'port': 8010,
            'plugins': { 'waterfall_view': True,
                         'console_view': True,
                         'grid_view': True,
                         'tyrian_view': True }
}
c['www']['authz'] = util.Authz(
    allowRules=[
        util.AnyEndpointMatcher(role="admins", defaultDeny=False),
        util.AnyControlEndpointMatcher(role="admins")
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=['admins'], usernames=[os.environ.get('WWW_AUTH_USER')])
    ]
)

PR_props = [
    "github.base.ref",
    "github.number",
    "github.mergeable",

]

c['www']['allowed_origins'] = ["*"]

c['www']['change_hook_dialects'] = {
    "github": {
        "secret": os.environ.get("BUILDBOT_HOOK_TOKEN"),
        "strict": True,
        "github_property_whitelist": PR_props
    }
}



c['www']['auth'] = util.UserPasswordAuth([(os.environ.get('WWW_AUTH_USER'),os.environ.get('WWW_AUTH_PASWD'))])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
